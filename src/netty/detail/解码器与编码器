将字节码解码为消息 -- ByteToMessageDecoder和ReplayingDecoder
将消息类型解码为另一种 -- MessageToMessageDecoder
Netty解码器实际上实现了ChannelInboundHandler,每当ChannelPipeline中的下一个ChannelInboundHandler转换如转数据时会用到

解码器
抽象类ByteToMessageDecoder:
    decode(ChannelHandlerContext,ByteBuf,List<Object>):decode()方法被调用时将会传入一个包含了传入数据的ByteBuf,以及一个用来添加
                                                       解码消息的 List。
    decodeLast(ChannelHandlerContext,ByteBuf,List<Object>):默认实现是简单调用decode,当Channel的状态变为非活动会被调用一次

抽象类ReplayingDecoder
    扩展了ByteToMessageDecoder,使得我们不用调用readableBytes()方法
    public abstract class ReplayingDecoder<S> extends ByteToMessageDecoder这个S是别欧美状态管理类型,void表示不需要管理

更多的解码器
 io.netty.handler.codec.LineBasedFrameDecoder—这个类在 Netty 内部也有使用，它使用了行尾控制字符（\n 或者\r\n）来解析消息数据
 io.netty.handler.codec.http.HttpObjectDecoder 一个 HTTP 数据的解码器。在 io.netty.handler.codec 子包下面，你将会发现更多用
   于特定用例的编码器和解码器实现

抽象类MessageToMessageDecoder
    decode(ChannelHandlerContext,I,List<Object>)

TooLongFrameException
        Netty是一个异步框架,所以需要在字节解码之前在内存中缓冲它们,因此,不能让解码器缓冲大量数据导出内存耗尽,为了解除这个顾虑提供这个类,在帧
    超过指定大小的时候抛出,这个TooLongFrameException异常会被ChannelHandler.exceptionCaught捕获

编码器
抽象类MessageToByteEncoder:
    encode(ChannelHandlerContext,I,ByteBuf)
抽象类MessageToMessageEncoder:
   encode(ChannelHandlerContext,I,List<Object>)

抽象的编解码器
抽象类ByteToMessageCodec
decode(ChannelHandlerContext,ByteBuf,List<Object>)
decodeLast(ChannelHandlerContext,ByteBuf,List<Object>)
encode(ChannelHandlerContext,I,ByteBuf)

抽象类MessageToMessageCodec
decode(ChannelHandlerContext,INBOUND_IN,List<Object>)
encode(ChannelHandlerContext,OUTBOUND_IN,List<Object>)

CombinedChannelDuplexHandler类
public class CombinedChannelDuplexHandler<I extends ChannelInboundHandler,O extends ChannelOutboundHandler>
结合一个编码器和解码器可能对重用性造成影响,这个类充当了ChannelInboundHandler 和 ChannelOutboundHandler的容器,通过分别继承了解码器和
编码器的类型,我们可以实现一个编解码器,而又不必直接扩展抽象的编解码器类